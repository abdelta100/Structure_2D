Blabadooshk's Log

20-24 Nov 2023:

Worked on why solver distributes reaction from a single point load applied vertically on a node, between the reaction
immediately in line, and one further away. Explored matrix instability, bit precision etc. No significant progress,
except false leads.

25 Nov 2023:

Figured out original solver was probably correct in distributing reaction. Non distribution required assuming axial
stiffnesses were infinite and no axial displacement would occur. However solver factors axial stiffness which causes
axial displacement, which creates moment, which transfers load to other side and then to the support.

26 Nov 2023:

Got UDL cases to work, fixed all sign issues in transferring FEM, should probably be correct

27 Nov 2023:

Got VDL cases to work, got formula from an arcane source. Instead of decomposing a trapezoidal shaped load into two
triangular loads, I distributed it into a triangular and a rectangular load. Used half of the sources equations for
right and left fixed end moment equations since i had discarded one of two triangular loads. For rectangular I
initialized a UDL instance, and returned its fixed end moments, summed both moments obtained. Then used the summation of
moment and forces (condition of equilibrium) to arrive at the fixed end shears (instead of using the sources equations,
which looked verbose to say the least). Verified against SAP2000.
Got Trapezoidal distributed Loads (i use it to refer to loads with multiple load magnitude, location pairs) to work,
I think. Divided multiple VDLs and summed their fixed end reactions.

22 Dec 2023:
Add principal force and Principal disp classes to accommodate single nodal loads for transfer etc. include summation behaviour and compose of point load and moment classes idk?

13 Jan 2024:
Figured out why results of code were wrong. Fundamentally an error in transforming element stiffness to global stiffness.
Previously used Transformation * ElementStiffness * Transformation.T.
Correct was Transformation.T * ElementStiffness * Transformation.

3 Feb 2024:
Added truss implementation. Wack procedure. Will elaborate later.
Had to amend the stiffness matrix for each element based on end releases, and use the same modification step to amend
the FEMs/FEAs applied at element ends.

5 Feb 2024:
Figured out a problem with truss implementation. If a moment is applied to a node solely connected to by truss elements,
the node rotates and also rotates the elements. I think this is because the np solver cannot possibly solve for the
following case:
c=np.array([[1,2,3], [2,5,1],[0,0,0]])
y=np.array([5, 8, 1])
x=np.linalg.solve(c, y)
There is a zero row, and non zero result, which intuitively should not yield a result, however a result is returned because of small
terms that get introduced to floating point math instead of an actual zero.
A solution could be to null any applied moment if it is detected that only truss elements connect to it,
or add a support type that is fixed in rotation only at that node (from a book)?